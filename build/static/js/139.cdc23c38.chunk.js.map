{"version":3,"file":"static/js/139.cdc23c38.chunk.js","mappings":"gLAYO,MAAMA,EAAsBC,MAAOC,EAAQC,EAAQC,EAAOC,KAC/D,IAEE,MAAQC,eAAgBC,SAAiBC,EAAAA,EAAAA,IAAsBN,EAAQC,EAAQC,EAAOC,GAGhFI,GAAcC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACfH,GAAM,IACTI,GAAI,UACJC,KAAM,iCACNC,WAAW,EACXC,gBAAgB,EAEhBC,MAAO,CACLC,MAAOT,EAAOQ,MAAMC,OAAS,GAC7BC,MAAOV,EAAOQ,MAAME,OAAS,GAC7BC,kBAAmBX,EAAOQ,MAAMG,mBAAqB,GACrDC,MAAOZ,EAAOQ,MAAMI,OAAS,eAC7BC,MAAOb,EAAOQ,MAAMK,OAAS,qBAC7BC,MAAOd,EAAOQ,MAAMM,OAAS,eAC7BC,cAAef,EAAOQ,MAAMO,eAAiB,2BAC7CC,MAAOhB,EAAOQ,MAAMQ,OAAS,eAC7BC,QAASjB,EAAOQ,MAAMS,SAAW,eACjCC,QAASlB,EAAOQ,MAAMU,SAAW,eACjCC,OAAQnB,EAAOQ,MAAMW,QAAU,2BAC/BC,KAAMpB,EAAOQ,MAAMY,MAAQ,eAC3BC,WAAYrB,EAAOQ,MAAMa,YAAc,SACvCC,kBAAmBtB,EAAOQ,MAAMc,mBAAqB,iBAEvDC,kBAAmBvB,EAAOuB,mBAAqB,CAAC,EAChDC,iBAAkBxB,EAAOwB,kBAAoB,KAW/C,MAAO,CACLxB,OAAQE,EACRuB,SAToBC,EAAAA,EAAAA,IAAuB,iFAADC,OACbC,KAAKC,UAAU3B,EAAgB,KAAM,GAAE,SACpE,SACAA,GAQJ,CAAE,MAAO4B,GAEP,MADAC,QAAQD,MAAM,oDAAaA,GACrB,IAAIE,MAAM,qDAADL,OAAcG,EAAML,SACrC,E","sources":["services/dynamicConfigService.js"],"sourcesContent":["// dynamicConfigService.js\r\nimport { generateDynamicConfig } from '../api';\r\nimport { createAssistantMessage } from './messageService';\r\n\r\n/**\r\n * 处理动态配置生成\r\n * @param {string} apiUrl - API地址\r\n * @param {string} apiKey - API密钥\r\n * @param {string} model - 模型名称\r\n * @param {string} userContent - 用户输入内容\r\n * @returns {Promise<Object>} 包含配置和消息的对象\r\n */\r\nexport const handleDynamicConfig = async (apiUrl, apiKey, model, userContent) => {\r\n  try {\r\n    // 调用API生成动态配置\r\n    const { functionResult: config } = await generateDynamicConfig(apiUrl, apiKey, model, userContent);\r\n\r\n    // 确保配置包含所有必要的字段\r\n    const completeConfig = {\r\n      ...config,\r\n      id: 'dynamic',\r\n      name: '动态思维链',\r\n      isDynamic: true,\r\n      isSystemConfig: true,\r\n      // 确保terms包含所有必要的默认值\r\n      terms: {\r\n        node1: config.terms.node1 || '',\r\n        node2: config.terms.node2 || [],\r\n        node2ComplexItems: config.terms.node2ComplexItems || [],\r\n        node3: config.terms.node3 || '步骤',\r\n        node4: config.terms.node4 || '子步骤',\r\n        node5: config.terms.node5 || '内容',\r\n        mainStructure: config.terms.mainStructure || '流程设计',\r\n        title: config.terms.title || '标题',\r\n        outline: config.terms.outline || '大纲',\r\n        content: config.terms.content || '内容',\r\n        detail: config.terms.detail || '详细内容',\r\n        type: config.terms.type || '类型',\r\n        detailFlag: config.terms.detailFlag || 'detail',\r\n        sectionDetailType: config.terms.sectionDetailType || 'sectionDetail'\r\n      },\r\n      fixedDescriptions: config.fixedDescriptions || {},\r\n      systemRolePrompt: config.systemRolePrompt || ''\r\n    };\r\n\r\n    // 创建配置生成成功的消息\r\n    const configMessage = createAssistantMessage(\r\n      `已根据业务场景生成配置:\\n\\`\\`\\`json\\n${JSON.stringify(completeConfig, null, 2)}\\n\\`\\`\\``,\r\n      'config',\r\n      completeConfig\r\n    );\r\n\r\n    // 返回配置和消息\r\n    return {\r\n      config: completeConfig,\r\n      message: configMessage\r\n    };\r\n  } catch (error) {\r\n    console.error('生成动态配置失败:', error);\r\n    throw new Error(`生成动态配置失败: ${error.message}`);\r\n  }\r\n}; "],"names":["handleDynamicConfig","async","apiUrl","apiKey","model","userContent","functionResult","config","generateDynamicConfig","completeConfig","_objectSpread","id","name","isDynamic","isSystemConfig","terms","node1","node2","node2ComplexItems","node3","node4","node5","mainStructure","title","outline","content","detail","type","detailFlag","sectionDetailType","fixedDescriptions","systemRolePrompt","message","createAssistantMessage","concat","JSON","stringify","error","console","Error"],"sourceRoot":""}